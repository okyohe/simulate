{"ast":null,"code":"import Vue from 'vue';\nimport Buefy from 'buefy';\nimport 'buefy/dist/buefy.css';\nVue.use(Buefy);\nexport default {\n  name: 'SimulateSavings',\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      // input data\n      deer_numbers: 150,\n      average_weight: 60,\n      garbage_ratio_percent: 70,\n      ingridient_ratio_percent: 50,\n      unitcost_garbage: 35,\n      unitcost_propangas: 690,\n      unitcost_citygas: 250,\n      // var\n      dry_weight: 0.3,\n      vs_ratio: 0.8,\n      vs_weight: false,\n      ratio_metan: 0.527,\n      // function\n      is_generate: false,\n      gas_type: \"propan\",\n      // SimulatedSavingsEnergyCost: \"???\",\n      isDetail: false,\n      //contact component つくりたい,\n      txtData: \"\",\n      address1: 'メールアドレス',\n      address2: '@co.jp',\n      address: this.address1 + this.address2,\n      subject: '○○の件について',\n      body: 'メール本文' + '%0D%0A' + this.txtData\n    };\n  },\n\n  computed: {\n    garbage_ratio: function () {\n      return this.garbage_ratio_percent / 100;\n    },\n    ingridient_ratio: function () {\n      return this.ingridient_ratio_percent / 100;\n    },\n    gabage_amount: function () {\n      return this.deer_numbers * this.average_weight * this.garbage_ratio;\n    },\n    amount_ingridient: function () {\n      return this.deer_numbers * this.average_weight * this.ingridient_ratio;\n    },\n    allcost_garbage: function () {\n      return this.gabage_amount * this.unitcost_garbage;\n    },\n    amount_gas: function () {\n      return this.amount_ingridient * this.dry_weight * this.vs_ratio * this.ratio_metan; //(m3) \n    },\n    // output\n    SimulatedSavingGarbageCost: function () {\n      return Math.round(this.allcost_garbage * this.ingridient_ratio);\n    },\n    SimulatedSavingsPropangasCost: function () {\n      return Math.round(this.amount_gas * this.unitcost_propangas);\n    },\n    SimulatedSavingsCitygasCost: function () {\n      return Math.round(this.amount_gas * this.unitcost_citygas);\n    },\n    SimulatedSavingsEnergyCost: function () {\n      if (this.gas_type == \"city\") {\n        return this.SimulatedSavingsCitygasCost.toLocaleString();\n      } else if (this.gas_type == \"propan\") {\n        return this.SimulatedSavingsPropangasCost.toLocaleString();\n      } else {\n        return \"大変申し訳ございません。エラーが発生しました。\";\n      }\n    }\n  },\n  methods: {\n    simulate: function () {\n      this.is_generate = true; // if(this.gas_type==\"city\"){\n      //   this.SimulatedSavingsEnergyCost = this.SimulatedSavingsCitygasCost.toLocaleString();                    \n      // }else if(this.gas_type==\"propan\"){\n      //   this.SimulatedSavingsEnergyCost = this.SimulatedSavingsPropangasCost.toLocaleString();          \n      // }else{\n      //   this.SimulatedSavingsEnergyCost = \"大変申し訳ございません。エラーが発生しました。\"\n      // }\n    },\n    reset: function () {\n      this.SimulatedSavingsEnergyCost = \"???\";\n      this.is_generate = false;\n    }\n  }\n};","map":{"version":3,"mappings":"AAyDA;AACA;AACA;AAEAA;AAEA;EACAC,uBADA;EAEAC;IACAC;EADA,CAFA;;EAKAC;IACA;MACA;MACAC,iBAFA;MAGAC,kBAHA;MAIAC,yBAJA;MAKAC,4BALA;MAMAC,oBANA;MAOAC,uBAPA;MAQAC,qBARA;MASA;MACAC,eAVA;MAWAC,aAXA;MAYAC,gBAZA;MAaAC,kBAbA;MAcA;MACAC,kBAfA;MAgBAC,kBAhBA;MAiBA;MACAC,eAlBA;MAoBA;MACAC,WArBA;MAsBAC,mBAtBA;MAuBAC,kBAvBA;MAwBAC,sCAxBA;MAyBAC,mBAzBA;MA0BAC;IA1BA;EA6BA,CAnCA;;EAoCAC;IACAC;MACA;IACA,CAHA;IAIAC;MACA;IACA,CANA;IAOAC;MACA;IACA,CATA;IAUAC;MACA;IACA,CAZA;IAaAC;MACA;IACA,CAfA;IAgBAC;MACA,mFADA,CACA;IACA,CAlBA;IAmBA;IACAC;MACA;IACA,CAtBA;IAuBAC;MACA;IACA,CAzBA;IA0BAC;MACA;IACA,CA5BA;IA6BAC;MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA;EAtCA,CApCA;EA4EAC;IACAC;MACA,wBADA,CAGA;MAEA;MACA;MAEA;MACA;MACA;MACA;IAEA,CAdA;IAeAC;MACA;MACA;IACA;EAlBA;AA5EA","names":["Vue","name","props","msg","data","deer_numbers","average_weight","garbage_ratio_percent","ingridient_ratio_percent","unitcost_garbage","unitcost_propangas","unitcost_citygas","dry_weight","vs_ratio","vs_weight","ratio_metan","is_generate","gas_type","isDetail","txtData","address1","address2","address","subject","body","computed","garbage_ratio","ingridient_ratio","gabage_amount","amount_ingridient","allcost_garbage","amount_gas","SimulatedSavingGarbageCost","SimulatedSavingsPropangasCost","SimulatedSavingsCitygasCost","SimulatedSavingsEnergyCost","methods","simulate","reset"],"sourceRoot":"src/components","sources":["SimulateSavings.vue"],"sourcesContent":["<template>\n  <div class=\"simulate\">\n    \n      <b-field label=\"年間処理頭数（頭/年） \" >\n          <b-input type=\"number\" v-model=\"deer_numbers\"></b-input>\n      </b-field>      \n      \n      <b-field label=\"一頭当たり平均重量（kg/年）\" >\n          <b-input type=\"number\" v-model=\"average_weight\"></b-input>\n      </b-field> \n        \n      \n      <b-field label=\"廃棄単価（円/kg）\">\n        <b-input type=\"number\" v-model=\"unitcost_garbage\"></b-input>\n      </b-field> \n      <div class=\"gas_change\">\n        <b-radio v-model=\"gas_type\" native-value=\"city\" name=\"gas_type\">\n            都市ガス\n        </b-radio>\n        <b-radio v-model=\"gas_type\" native-value=\"propan\" name=\"gas_type\">\n            プロパンガス\n        </b-radio>        \n      </div>\n   \n      \n      <b-field label=\"プロパンガス単位料金（円/㎥）\" v-show=\"gas_type=='propan'\">\n        <b-input type=\"number\" v-model=\"unitcost_propangas\"></b-input>\n      </b-field>\n      <b-field label=\"都市ガス単位料金（円/㎥）\" v-show=\"gas_type=='city'\">\n        <b-input type=\"number\" v-model=\"unitcost_citygas\"></b-input>\n      </b-field>            \n      <b-field label=\"詳細入力モード\">\n            <b-switch v-model=\"isDetail\"></b-switch>\n      </b-field>\n      <section class=\"ingridient_ratio\" v-show=\"isDetail\">\n        <b-field label=\"現在の一頭当たりの廃棄量の割合（％）\">\n            <b-slider v-model=\"garbage_ratio_percent\"></b-slider>\n        </b-field>\n        \n        <b-field label=\"導入時の一頭当たりの投入可能内臓量の割合（％）\">\n            <b-slider v-model=\"ingridient_ratio_percent\"></b-slider>\n        </b-field>      \n      </section> \n      <div class=\"generated\" v-show=\"is_generate\">        \n        <p>節約できるガス量は{{amount_gas}}㎥、ガス料金は{{SimulatedSavingsEnergyCost}}円/年です。</p>\n        <p>概算になりますので、詳しいお見積りはご相談の際に共有させていただきます。</p>\n        <p class=\"mt-4\">deerveryone@gmail.com</p>\n        <p>070-8380-0865</p>\n      </div> \n      <b-button @click=\"simulate\" type=\"is-primary\">計算する</b-button>\n      <b-button @click=\"reset\" type=\"is-primary is-light\">リセットする</b-button>            \n           \n      \n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\n\nVue.use(Buefy)\n\nexport default {\n  name: 'SimulateSavings',\n  props: {\n    msg: String,    \n  },\n  data() {\n            return {\n              // input data\n              deer_numbers:150,\n              average_weight:60,\n              garbage_ratio_percent:70,              \n              ingridient_ratio_percent:50,              \n              unitcost_garbage:35,\n              unitcost_propangas: 690,\n              unitcost_citygas: 250,\n              // var\n              dry_weight: 0.3,\n              vs_ratio: 0.8,\n              vs_weight: false,\n              ratio_metan: 0.527,\n              // function\n              is_generate:false,\n              gas_type: \"propan\",\n              // SimulatedSavingsEnergyCost: \"???\",\n              isDetail: false,\n\n              //contact component つくりたい,\n              txtData: \"\",\n              address1: 'メールアドレス',\n              address2: '@co.jp',\n              address: this.address1+this.address2,\n              subject: '○○の件について',\n              body: 'メール本文' + '%0D%0A' + this.txtData,\n              \n            }\n        },\n  computed:{\n    garbage_ratio:function(){\n        return this.garbage_ratio_percent/100\n    },\n    ingridient_ratio:function(){\n        return this.ingridient_ratio_percent/100\n    },\n    gabage_amount: function(){\n      return this.deer_numbers * this.average_weight * this.garbage_ratio;\n    },\n    amount_ingridient: function(){\n      return this.deer_numbers * this.average_weight * this.ingridient_ratio;\n    },\n    allcost_garbage: function(){\n      return this.gabage_amount * this.unitcost_garbage;\n    },\n    amount_gas: function(){\n      return this.amount_ingridient * this.dry_weight *  this.vs_ratio * this.ratio_metan //(m3) \n    },\n    // output\n    SimulatedSavingGarbageCost: function() {\n      return Math.round(this.allcost_garbage * this.ingridient_ratio);\n    },\n    SimulatedSavingsPropangasCost: function(){\n      return Math.round(this.amount_gas * this.unitcost_propangas);\n    },\n    SimulatedSavingsCitygasCost: function(){\n      return Math.round(this.amount_gas * this.unitcost_citygas);        \n    },\n    SimulatedSavingsEnergyCost: function(){\n\n      if(this.gas_type==\"city\"){          \n          return this.SimulatedSavingsCitygasCost.toLocaleString();                    \n        }else if(this.gas_type==\"propan\"){          \n          return this.SimulatedSavingsPropangasCost.toLocaleString();          \n        }else{\n          return \"大変申し訳ございません。エラーが発生しました。\"\n        }\n    }\n  },\n  methods : {\n      simulate:function(){      \n        this.is_generate = true;  \n\n        // if(this.gas_type==\"city\"){\n          \n        //   this.SimulatedSavingsEnergyCost = this.SimulatedSavingsCitygasCost.toLocaleString();                    \n        // }else if(this.gas_type==\"propan\"){\n          \n        //   this.SimulatedSavingsEnergyCost = this.SimulatedSavingsPropangasCost.toLocaleString();          \n        // }else{\n        //   this.SimulatedSavingsEnergyCost = \"大変申し訳ございません。エラーが発生しました。\"\n        // }\n        \n      },\n      reset: function(){\n        this.SimulatedSavingsEnergyCost= \"???\";\n        this.is_generate = false;\n      },\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.simulate{\n  margin: auto 2rem;\n  \n  \n}\n.ingridient_ratio{\n  /* display: none */\n  margin:1.5rem auto;\n}\nh3 {\n  margin: 2rem 0 3rem;\n  font-weight: bold;\n  font-size: 2rem;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n.button{\n  margin:1rem auto\n}\n.gas_change{\n  margin: 1rem auto;\n}\n.generated{\n  margin: 4rem auto;\n  font-family: bold;\n}\n.simulate .field{\n  width: 100%\n}\n@media (min-width: 824px) {\n  .simulate{\n    width: 30%;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    margin: auto;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}